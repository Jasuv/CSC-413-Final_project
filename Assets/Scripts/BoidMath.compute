#pragma kernel CSMain

struct BoidData
{
    // input
    float3 pos;
    float3 vel;
    int species;
    float vision;
    float power;

    // output
    float3 separationVec;
    float3 alignmentVec;
    float3 cohesionVec;
};

RWStructuredBuffer<BoidData> Boids;
int count;

[numthreads(1024, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) 
{
    int i = id.x;
    int j = 0;
    int near = 0;

    float3 avoidVec = float3(0, 0, 0);
    float3 avgVel = float3(0, 0, 0);
    float3 center = float3(0, 0, 0);

    for (j = 0; j < count; j++)
    {
        float dist = distance(Boids[i].pos, Boids[j].pos);
        if (dist <= Boids[i].vision) 
        {
            // separation
            if (dist <= Boids[i].vision * 0.5f && i != j)
            {
                float strength = max(Boids[i].vision * 0.5f - dist, 0.1f);
                avoidVec += normalize(Boids[i].pos - Boids[j].pos) * strength * (Boids[j].power / Boids[i].power);
            }

            // alignment & cohesion
            if (Boids[i].species == Boids[j].species) 
            {
                near++;
                avgVel += Boids[j].vel;
                center += Boids[j].pos;
            }
        }
    }

    // set vectors
    Boids[i].separationVec = avoidVec;
    if (near > 0) 
    {
        float alignmentStrength = 1.0 / (near * near + 0.1f);
        Boids[i].alignmentVec = (avgVel / near + Boids[i].vel) * alignmentStrength;
        Boids[i].cohesionVec = (center / near - Boids[i].pos) * alignmentStrength;
    } 
}